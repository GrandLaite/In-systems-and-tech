package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "path/filepath"
    "strings"

    "github.com/saintfish/chardet"
    "golang.org/x/text/encoding"
    "golang.org/x/text/encoding/charmap"
    "golang.org/x/text/encoding/htmlindex"
    "golang.org/x/text/transform"
)

func main() {
    // Получаем путь к файлу от пользователя
    reader := bufio.NewReader(os.Stdin)
    fmt.Print("Введите путь к файлу: ")
    filePath, _ := reader.ReadString('\n')
    filePath = strings.TrimSpace(filePath)

    // Открываем файл
    file, err := os.Open(filePath)
    if err != nil {
        fmt.Println("Ошибка открытия файла:", err)
        return
    }
    defer file.Close()

    // Читаем содержимое файла
    content, err := io.ReadAll(file)
    if err != nil {
        fmt.Println("Ошибка чтения файла:", err)
        return
    }

    // Определяем кодировку файла
    detector := chardet.NewTextDetector()
    result, err := detector.DetectBest(content)
    if err != nil {
        fmt.Println("Ошибка определения кодировки:", err)
        return
    }

    fmt.Println("Определенная кодировка:", result.Charset)

    // Получаем кодировку исходного файла
    sourceEncoding, err := htmlindex.Get(result.Charset)
    if err != nil {
        fmt.Println("Не удалось получить декодер для кодировки:", result.Charset)
        return
    }

    // Предлагаем выбор кодировки для преобразования
    fmt.Println("Выберите кодировку для преобразования:")
    fmt.Println("1 - CP866")
    fmt.Println("2 - CP1251")
    fmt.Println("3 - CP10007")
    fmt.Println("4 - ISO-8859-5")
    fmt.Print("Введите номер кодировки: ")
    choiceStr, _ := reader.ReadString('\n')
    choiceStr = strings.TrimSpace(choiceStr)

    // Соотносим выбор пользователя с нужной кодировкой
    var targetEncoding encoding.Encoding
    switch choiceStr {
    case "1":
        targetEncoding = charmap.CodePage866
    case "2":
        targetEncoding = charmap.Windows1251
    case "3":
        targetEncoding = charmap.MacCyrillic // Предположительно CP10007 соответствует MacCyrillic
    case "4":
        targetEncoding = charmap.ISO8859_5
    default:
        fmt.Println("Неверный выбор кодировки")
        return
    }

    // Декодируем содержимое в UTF-8
    utf8Content, err := io.ReadAll(transform.NewReader(strings.NewReader(string(content)), sourceEncoding.NewDecoder()))
    if err != nil {
        fmt.Println("Ошибка декодирования файла:", err)
        return
    }

    // Кодируем содержимое в выбранную кодировку
    encodedContent, err := io.ReadAll(transform.NewReader(strings.NewReader(string(utf8Content)), targetEncoding.NewEncoder()))
    if err != nil {
        fmt.Println("Ошибка кодирования файла:", err)
        return
    }

    // Создаем новое имя файла с припиской "_converted"
    ext := filepath.Ext(filePath)
    name := strings.TrimSuffix(filepath.Base(filePath), ext)
    newFileName := name + "_converted" + ext
    newFilePath := filepath.Join(filepath.Dir(filePath), newFileName)

    // Создаем новый файл и записываем туда преобразованное содержимое
    newFile, err := os.Create(newFilePath)
    if err != nil {
        fmt.Println("Ошибка создания файла:", err)
        return
    }
    defer newFile.Close()

    _, err = newFile.Write(encodedContent)
    if err != nil {
        fmt.Println("Ошибка записи файла:", err)
        return
    }

https://drive.google.com/drive/folders/1e57pyccWZlPAB9Ze9zaGD7Z7K1VBxLmj?usp=drive_link

    fmt.Println("Файл успешно преобразован и сохранен как", newFilePath)
}
